(function(){"use strict";window.PxMapBehavior=window.PxMapBehavior||{};PxMapBehavior.MarkerGroupImpl={properties:{name:{type:String,notify:!0},data:{type:Object,observer:"shouldUpdateInst"},_colorsByType:{type:Object,value:function value(){return{}}},colorsByType:{type:Object,value:function value(){return{}},observer:"_calculateColorsByType"},iconFns:{type:Object,value:function value(){return{cluster:void 0,marker:void 0}}},clusterConfig:{type:Object}},update:function update(){if(!this.elementInst)return;var _this$getInstOptions=this.getInstOptions(),data=_this$getInstOptions.data,features=this._syncDataWithMarkers(data.features,this.elementInst);this._notifyNewFeatures(features)},redraw:function redraw(){if(!this.elementInst)return;this._clearAllMarkersAndData(this.elementInst);this.update()},addInst:function addInst(parent){var spiderifyFn=this._handleClusterSpiderify.bind(this),unspiderifyFn=this._handleClusterUnspiderify.bind(this),markerTapFn=this._handleSingleMarkerTap.bind(this),markerDoubleClickFn=this._handleSingleMarkerDoubleClick.bind(this),clusterTapFn=this._handleClusterTap.bind(this);this.bindEvents({spiderfied:spiderifyFn,unspiderfied:unspiderifyFn,click:markerTapFn,dblclick:markerDoubleClickFn,clusterclick:clusterTapFn});PxMapBehavior.LayerImpl.addInst.call(this,parent);this.async(function(){this.fire("px-map-marker-group-added")})},removeInst:function removeInst(parent){PxMapBehavior.LayerImpl.removeInst.call(this,parent)},createInst:function createInst(){var options=0<arguments.length&&arguments[0]!==void 0?arguments[0]:{},cluster=L.markerClusterGroup(options);if(options.data){var features=this._syncDataWithMarkers(options.data.features,cluster);this._notifyNewFeatures(features)}return cluster},updateInst:function updateInst(lastOptions,nextOptions){if(nextOptions.data){var features=this._syncDataWithMarkers(nextOptions.data.features,this.elementInst);this._notifyNewFeatures(features)}},getInstOptions:function getInstOptions(){var defaultOptions={showCoverageOnHover:!0,maxClusterRadius:150,spiderifyOnMaxZoom:!0,removeOutsideVisibleBounds:!0,animate:!0,polygonOptions:{stroke:!0,color:this.getComputedStyleValue("--internal-px-map-marker-group-cluster-polygon-stroke-color"),fillColor:this.getComputedStyleValue("--internal-px-map-marker-group-cluster-polygon-fill-color"),fillOpacity:.4}},options=Object.assign(defaultOptions,this.clusterConfig||{});options.data=this._getValidData();options.iconCreateFunction=this._createClusterIcon.bind(this);return options},_notifyNewFeatures:function _notifyNewFeatures(featureSet){if(!featureSet||!babelHelpers.instanceof(featureSet,Set)||!featureSet.size)return;this.async(function _notifyNewFeaturesDebounce(){var bounds=L.latLngBounds(),feature,_iteratorNormalCompletion=!0,_didIteratorError=!1,_iteratorError=void 0;try{for(var _iterator=featureSet[Symbol.iterator](),_step;!(_iteratorNormalCompletion=(_step=_iterator.next()).done);_iteratorNormalCompletion=!0){feature=_step.value;bounds.extend([feature.geometry.coordinates[1],feature.geometry.coordinates[0]])}}catch(err){_didIteratorError=!0;_iteratorError=err}finally{try{if(!_iteratorNormalCompletion&&null!=_iterator.return){_iterator.return()}}finally{if(_didIteratorError){throw _iteratorError}}}this.fire("px-map-marker-group-features-changed",{bounds:bounds})},1)},_getValidData:function _getValidData(){if(!this.data){return}var dataIsNotValid="object"!==babelHelpers.typeof(this.data)||"FeatureCollection"!==this.data.type||!Array.isArray(this.data.features)||!this.data.features.length||"object"!==babelHelpers.typeof(this.data.features[0]);if(dataIsNotValid){console.log("PX-MAP CONFIGURATION ERROR:\n          The `data` attribute for ".concat(this.is," is not valid GeoJSON. Valid GeoJSON\n          that follows the FeatureCollection standard is required to draw the\n          marker clusters. See the GeoJSON spec website (http://geojson.org/geojson-spec.html)\n          for more information on what is required.\n\n          The minimum requirements for ").concat(this.is," are:\n          - Must be a valid JavaScript object (or deserializable to an object)\n          - Must have key `type` with value 'FeatureCollection'\n          - Must have key `features` with value of an array with length\n          - Each entry in `features` must be a valid object\n        "));return}return this.data},created:function created(){var updateFn=this.updateStyles;this.updateStyles=this._handleStylesUpdated.bind(this);this._updateStylesFn=updateFn},_handleStylesUpdated:function _handleStylesUpdated(){this._updateStylesFn();this._calculateColorsByType(this.colorsByType)},_createClusterIcon:function _createClusterIcon(cluster){if(this.iconFns.cluster){return this.iconFns.cluster.call(this,cluster)}var markers=cluster.getAllChildMarkers(),count=markers.length,types=this._indexClusterMarkersByType(markers),colors=this._colorsByType,containerSize=this._getClusterIconSize(count),pathSize=this._getStyleValueAsNum("--internal-px-map-marker-group-cluster-path-size")||10,borderSize=this._getStyleValueAsNum("--internal-px-map-marker-group-cluster-border-size")||0,options={count:count,countByType:types,colorsByType:colors,containerSize:containerSize,pathSize:pathSize,borderSize:borderSize,styleScope:this.isShadyScoped()?this.getShadyScope():void 0};return new PxMap.ClusterIcon(options)},_calculateColorsByType:function _calculateColorsByType(publicColorsByType){var newColorsByType=Object.assign({},this._getAllIconColors(),publicColorsByType||{}),lastColorsByTypeStringified=JSON.stringify(this._colorsByType);if(JSON.stringify(newColorsByType)!==lastColorsByTypeStringified){this._colorsByType=newColorsByType;if("{}"!==lastColorsByTypeStringified){this.redraw()}}},_getAllIconColors:function _getAllIconColors(){for(var colors={info:this.getComputedStyleValue("--internal-px-map-icon-info-color"),warning:this.getComputedStyleValue("--internal-px-map-icon-warning-color"),important:this.getComputedStyleValue("--internal-px-map-icon-important-color"),unknown:this.getComputedStyleValue("--internal-px-map-icon-unknown-color")},customColor,i=0;101>i;i++){customColor=this.getComputedStyleValue("--px-map-color-custom-".concat(i));if(!customColor||""===customColor){break}colors["custom-".concat(i)]=customColor}return colors},_getStyleValueAsNum:function _getStyleValueAsNum(styleValName){this.__styleVals=this.__styleVals||{};if(this.__styleVals[styleValName])return this.__styleVals[styleValName];var computedVal=this.getComputedStyleValue(styleValName);if(computedVal&&-1!==computedVal.indexOf("px")){var valWithoutSuffix=computedVal.replace("px",""),valAsNum=Math.floor(valWithoutSuffix);this.__styleVals[styleValName]=valAsNum;return valAsNum}else{return}},_getClusterIconSize:function _getClusterIconSize(count){if(10>count){return 60}if(10<=count&&40>count){return 75}if(40<count){return 90}},_indexClusterMarkersByType:function _indexClusterMarkersByType(markers){return markers.reduce(function(types,marker){if(marker.featureProperties&&marker.featureProperties["marker-icon"]&&marker.featureProperties["marker-icon"]["icon-type"]){types[marker.featureProperties["marker-icon"]["icon-type"]]=(types[marker.featureProperties["marker-icon"]["icon-type"]]||0)+1}return types},{})},_clearAllMarkersAndData:function _clearAllMarkersAndData(clusterInst){clusterInst.clearLayers();this._features=null;this._markers=null},_syncDataWithMarkers:function _syncDataWithMarkers(newFeatures,clusterInst){if(!newFeatures.length)return;var featuresSet=this._features=this._features||new Set,markersMap=this._markers=this._markers||new WeakMap,_this$_diffNewFeature=this._diffNewFeatures(newFeatures,featuresSet,markersMap),featuresToAdd=_this$_diffNewFeature.featuresToAdd,featuresToUpdate=_this$_diffNewFeature.featuresToUpdate,featuresToRemove=_this$_diffNewFeature.featuresToRemove,nextFeaturesSet=_this$_diffNewFeature.nextFeaturesSet,nextMarkersMap=_this$_diffNewFeature.nextMarkersMap,feature,cachedMarker,markersToOperate;if(featuresToAdd.size){markersToOperate=[];var _iteratorNormalCompletion2=!0,_didIteratorError2=!1,_iteratorError2=void 0;try{for(var _iterator2=featuresToAdd[Symbol.iterator](),_step2;!(_iteratorNormalCompletion2=(_step2=_iterator2.next()).done);_iteratorNormalCompletion2=!0){feature=_step2.value;cachedMarker=nextMarkersMap.get(feature);cachedMarker.marker=this._createMarker(feature);markersToOperate.push(cachedMarker.marker);nextMarkersMap.set(feature,cachedMarker)}}catch(err){_didIteratorError2=!0;_iteratorError2=err}finally{try{if(!_iteratorNormalCompletion2&&null!=_iterator2.return){_iterator2.return()}}finally{if(_didIteratorError2){throw _iteratorError2}}}clusterInst.addLayers(markersToOperate);markersToOperate=null}if(featuresToUpdate.size){markersToOperate=[];var _iteratorNormalCompletion3=!0,_didIteratorError3=!1,_iteratorError3=void 0;try{for(var _iterator3=featuresToUpdate[Symbol.iterator](),_step3;!(_iteratorNormalCompletion3=(_step3=_iterator3.next()).done);_iteratorNormalCompletion3=!0){feature=_step3.value;cachedMarker=nextMarkersMap.get(feature);cachedMarker.marker=this._updateMarker(feature,cachedMarker.marker);markersToOperate.push(cachedMarker.marker);nextMarkersMap.set(feature,cachedMarker)}}catch(err){_didIteratorError3=!0;_iteratorError3=err}finally{try{if(!_iteratorNormalCompletion3&&null!=_iterator3.return){_iterator3.return()}}finally{if(_didIteratorError3){throw _iteratorError3}}}clusterInst.refreshClusters(markersToOperate);markersToOperate=null}if(featuresToRemove.size){markersToOperate=[];var _iteratorNormalCompletion4=!0,_didIteratorError4=!1,_iteratorError4=void 0;try{for(var _iterator4=featuresToRemove[Symbol.iterator](),_step4;!(_iteratorNormalCompletion4=(_step4=_iterator4.next()).done);_iteratorNormalCompletion4=!0){feature=_step4.value;cachedMarker=nextMarkersMap.get(feature);markersToOperate.push(cachedMarker.marker);nextMarkersMap.delete(feature)}}catch(err){_didIteratorError4=!0;_iteratorError4=err}finally{try{if(!_iteratorNormalCompletion4&&null!=_iterator4.return){_iterator4.return()}}finally{if(_didIteratorError4){throw _iteratorError4}}}clusterInst.removeLayers(markersToOperate);markersToOperate=null}this._features=nextFeaturesSet;this._markers=nextMarkersMap;featuresSet.clear();featuresToAdd.clear();featuresToUpdate.clear();featuresToRemove.clear();return this._features},_diffNewFeatures:function _diffNewFeatures(newFeatures,lastFeatureSet,markerMap){var nextFeaturesSet=new Set,featuresToAdd=new Set,featuresToUpdate=new Set,i,len,valid,known,cachedMarker,featureHash;for(i=0,len=newFeatures.length;i<len;i++){valid=newFeatures[i].id&&newFeatures[i].geometry&&"Point"===newFeatures[i].geometry.type&&babelHelpers.instanceof(newFeatures[i].geometry.coordinates,Array)&&2===newFeatures[i].geometry.coordinates.length;if(!valid)continue;known=lastFeatureSet.has(newFeatures[i]);if(!known){featuresToAdd.add(newFeatures[i]);lastFeatureSet.delete(newFeatures[i]);nextFeaturesSet.add(newFeatures[i]);cachedMarker={marker:null,hash:JSON.stringify(newFeatures[i])};markerMap.set(newFeatures[i],cachedMarker);continue}if(known){cachedMarker=markerMap.get(newFeatures[i]);featureHash=JSON.stringify(newFeatures[i]);if(cachedMarker.hash!==featureHash){featuresToUpdate.add(newFeatures[i]);cachedMarker.hash=featureHash;markerMap.set(newFeatures[i],cachedMarker)}lastFeatureSet.delete(newFeatures[i]);nextFeaturesSet.add(newFeatures[i])}}var featuresToRemove=lastFeatureSet.size?lastFeatureSet:new Set;lastFeatureSet=null;return{featuresToAdd:featuresToAdd,featuresToUpdate:featuresToUpdate,featuresToRemove:featuresToRemove,nextFeaturesSet:nextFeaturesSet,nextMarkersMap:markerMap}},_createMarker:function _createMarker(feature){var _feature$geometry$coo=babelHelpers.slicedToArray(feature.geometry.coordinates,2),lat=_feature$geometry$coo[0],lng=_feature$geometry$coo[1],marker=L.marker([lng,lat]),iconSettings=feature.properties["marker-icon"]?this._extractMarkerIconSettings(feature.properties["marker-icon"]):{};iconSettings.base=iconSettings.base||"static-icon";iconSettings.type=iconSettings.type||"info";iconSettings.color=this._colorsByType[iconSettings.type]||"black";var icon=this._createMarkerIcon(iconSettings);marker.setIcon(icon);marker.featureProperties=feature.properties;return marker},_updateMarker:function _updateMarker(feature,marker){var _marker$getLatLng=marker.getLatLng(),lat=_marker$getLatLng.lat,lng=_marker$getLatLng.lng,_feature$geometry$coo2=babelHelpers.slicedToArray(feature.geometry.coordinates,2),nextLng=_feature$geometry$coo2[0],nextLat=_feature$geometry$coo2[1];if(lat!==+nextLat||lng!==+nextLng){marker.setLatLng([nextLat,nextLng])}var iconSettings=feature.properties["marker-icon"]?this._extractMarkerIconSettings(feature.properties["marker-icon"]):{};iconSettings.base=iconSettings.base||"static-icon";iconSettings.type=iconSettings.type||"info";var icon=this._createMarkerIcon(iconSettings);marker.setIcon(icon);marker.featureProperties=feature.properties;return marker},_extractMarkerIconSettings:function _extractMarkerIconSettings(featSettings){var featSettingsKeys=Object.keys(featSettings);if(!featSettingsKeys.length)return;var iconSettings={},i,len,featKeyCamelized;for(i=0,len=featSettingsKeys.length;i<len;i++){if("icon-"!==featSettingsKeys[i].substring(0,5))continue;featKeyCamelized=featSettingsKeys[i].substring(5).replace(/(\-[a-z])/g,function(match){return match.charAt(1).toUpperCase()});iconSettings[featKeyCamelized]=featSettings[featSettingsKeys[i]]}return iconSettings},_createMarkerIcon:function _createMarkerIcon(options){if(this.iconFns.marker){return this.iconFns.marker.call(this,options)}options.styleScope=this.isShadyScoped()?this.getShadyScope():void 0;var klassName=this._strToKlassName(options.base);return new PxMap[klassName](options)},_strToKlassName:function _strToKlassName(str){return str.charAt(0).toUpperCase()+str.substring(1).replace(/(\-[a-z])/g,function(match){return match.charAt(1).toUpperCase()})},_handleClusterSpiderify:function _handleClusterSpiderify(evt){if(!evt||!evt.cluster||!evt.cluster._icon)return;evt.cluster._icon.style.visibility="hidden"},_handleClusterUnspiderify:function _handleClusterUnspiderify(evt){if(!evt||!evt.cluster||!evt.cluster._icon)return;evt.cluster._icon.style.visibility="visible"},_handleSingleMarkerTap:function _handleSingleMarkerTap(evt){if(evt.layer&&babelHelpers.instanceof(evt.layer.getLatLng(),L.LatLng)){var latLng=L.latLng(evt.layer.getLatLng()),lat=latLng.lat,lng=latLng.lng,detail={latLng:latLng,lat:lat,lng:lng,feature:evt.layer.featureProperties?evt.layer.featureProperties:void 0};this.fire("px-map-marker-group-marker-tapped",detail)}if(evt.layer&&evt.layer.featureProperties&&evt.layer.featureProperties.hasOwnProperty("marker-popup")){this._bindAndOpenPopup(evt.layer)}},_handleSingleMarkerDoubleClick:function _handleSingleMarkerDoubleClick(evt){var latLng=L.latLng(evt.layer.getLatLng()),lat=latLng.lat,lng=latLng.lng,detail={latLng:latLng,lat:lat,lng:lng,feature:evt.layer.featureProperties?evt.layer.featureProperties:void 0};this.fire("px-map-marker-group-marker-double-clicked",detail)},_handleClusterTap:function _handleClusterTap(evt){for(var latLngBounds=evt.layer.getBounds(),markers=evt.layer.getAllChildMarkers(),features=[],i=0;i<markers.length;i++){features.push(markers[i].featureProperties)}var detail={bounds:latLngBounds,features:features};this.fire("px-map-marker-group-cluster-tapped",detail)},_bindAndOpenPopup:function _bindAndOpenPopup(marker){if(!marker||!marker.bindPopup||!marker.openPopup)return;var popupSettings=this._featSettingsToProps(marker.featureProperties["marker-popup"],"popup");if(!popupSettings||!Object.keys(popupSettings).length)return;var klassName=popupSettings._Base&&PxMap.hasOwnProperty(popupSettings._Base)?popupSettings._Base:"InfoPopup",popup=new PxMap[klassName](popupSettings);marker.bindPopup(popup).openPopup();marker.__boundCloseFn=this._unbindAndClosePopup.bind(this,marker);marker.on("popupclose",marker.__boundCloseFn)},_unbindAndClosePopup:function _unbindAndClosePopup(marker){if(!marker||!marker.getPopup||!marker.getPopup())return;marker.off("popupclose",marker.__boundCloseFn);marker.__boundCloseFn=null;marker.closePopup().unbindPopup()},_featSettingsToProps:function _featSettingsToProps(settings,prefix){var keys=Object.keys(settings);if(!keys.length)return;var settingsAsProps={},i=0,len=keys.length,newKey;for(;i<len;i++){if(prefix&&keys[i].substr(0,prefix.length)!==prefix){continue}if(/^[A-Za-z]+\-base$/.test(keys[i])){settingsAsProps._Base=this._strToKlassName(settings[keys[i]]);continue}newKey=keys[i].replace(/^[A-Za-z]+\-(.*)$/,"$1");settingsAsProps[newKey]=settings[keys[i]]}return settingsAsProps}};PxMapBehavior.MarkerGroup=[PxMapBehavior.Layer,PxMapBehavior.MarkerGroupImpl]})();