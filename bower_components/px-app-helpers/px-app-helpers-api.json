{"schema_version":"1.0.0","elements":[{"description":"### Usage\n\n    <px-app-header>\n      <px-app-nav slot=\"app-nav\" items=\"...\"></px-app-nav>\n    </px-app-header>\n\nThe default configuration will contain a px-branding-bar that will inherit the `title` attribute from your application.\nTo override the title, use the branding-bar slot instead:\n\n    <px-app-header>\n      <px-branding-bar slot=\"branding-bar\" application-title=\"...\"></px-branding-bar>\n      <px-app-nav slot=\"app-nav\" items=\"...\"></px-app-nav>\n    </px-app-header>","summary":"","path":"../px-app-helpers/px-app-header/px-app-header.es6.js","properties":[{"name":"fixed","type":"boolean","description":"By default, the branding bar within the app header container will minimize as the user scrolls away.\nIf this property is set, the branding bar will stay fixed as the user scrolls away.","privacy":"public","sourceRange":{"start":{"line":8,"column":6},"end":{"line":12,"column":7}},"metadata":{"polymer":{"observer":"\"_fixedChanged\""}},"defaultValue":"false"},{"name":"_condenses","type":"boolean","description":"","privacy":"protected","sourceRange":{"start":{"line":13,"column":6},"end":{"line":16,"column":7}},"metadata":{"polymer":{}},"defaultValue":"true"},{"name":"_scrollEffect","type":"string","description":"","privacy":"protected","sourceRange":{"start":{"line":17,"column":6},"end":{"line":20,"column":7}},"metadata":{"polymer":{}},"defaultValue":"\"px-app-header-scroll-effect\""}],"methods":[{"name":"ready","description":"","privacy":"protected","sourceRange":{"start":{"line":22,"column":4},"end":{"line":26,"column":5}},"metadata":{},"params":[]},{"name":"_setHeaderFixedState","description":"","privacy":"protected","sourceRange":{"start":{"line":27,"column":4},"end":{"line":30,"column":5}},"metadata":{},"params":[]},{"name":"_fixedChanged","description":"","privacy":"protected","sourceRange":{"start":{"line":31,"column":4},"end":{"line":35,"column":5}},"metadata":{},"params":[]}],"staticMethods":[],"demos":[{"url":"index.html","description":""}],"metadata":{},"sourceRange":{"start":{"line":1,"column":10},"end":{"line":36,"column":3}},"privacy":"public","superclass":"HTMLElement","attributes":[{"name":"fixed","description":"By default, the branding bar within the app header container will minimize as the user scrolls away.\nIf this property is set, the branding bar will stay fixed as the user scrolls away.","sourceRange":{"start":{"line":8,"column":6},"end":{"line":12,"column":7}},"metadata":{},"type":"boolean"}],"events":[],"styling":{"cssVariables":[],"selectors":[]},"slots":[{"description":"","name":"branding-bar","range":{"file":"px-app-helpers/px-app-header/px-app-header.html","start":{"line":43,"column":10},"end":{"line":45,"column":17}}},{"description":"","name":"app-nav","range":{"file":"px-app-helpers/px-app-header/px-app-header.html","start":{"line":48,"column":10},"end":{"line":48,"column":38}}},{"description":"","name":"","range":{"file":"px-app-helpers/px-app-header/px-app-header.html","start":{"line":51,"column":6},"end":{"line":51,"column":19}}}],"tagname":"px-app-header"},{"description":"The px-app-route component relies on the Polymer team's [app-location](https://www.webcomponents.org/element/PolymerElements/app-route)\nelement to manage the window location and history state. The element will consume\nthe `route` provided by app-location and send updates to other components\non the page when the URL changes. Interaction with other components on the page\nwill be propagated up to the URL using the same bindings.\n\n### Installing and including in an app\n\nThe px-app-route element is included as part of the [px-app-helpers](https://github.com/PredixDev/px-app-helpers) package.\nTo install the element using bower, use the following command:\n\n    bower install --save px-app-helpers\n\nAfter installing, import the code using HTML imports into the app file that\nimplements px-app-helpers. You'll also need to import app-location from the\nPolymer team's app-route package.\n\n    <link rel=\"import\" href=\"/bower_components/app-route/app-location.html\"/>\n    <link rel=\"import\" href=\"/bower_components/px-app-helpers/px-app-route/px-app-route.html\"/>\n\nThe app-route package will be installed automatically when px-app-helpers\nis included in your bower file.\n\n### Using px-app-route\n\nThe following simplified example shows how px-app-route can be used to send\nupdates to the [px-app-nav](https://www.predix-ui.com/#/components/px-app-nav/)\nelement when the URL changes, and update the URL when the navigation is\ninteracted with:\n\n    <app-location route=\"{{route}}\" use-hash-as-path></app-location>\n    <px-app-route\n        route=\"{{route}}\"\n        use-hash-as-path\n        update-nav-route\n        nav-route=\"{{navRoute}}\">\n    </px-app-route>\n    <px-app-nav\n        items=\"{{navItems}}\"\n        selected-route=\"{{navRoute}}\">\n    </px-app-nav>\n\nIf the following `navItems` are defined:\n\n    [\n      {\n        \"id\" : \"home\",\n        \"label\" : \"Home\"\n      },\n      {\n        \"id\" : \"dashboards\",\n        \"label\" : \"Dashboards\",\n        \"children\" : [\n          {\n            \"id\" : \"a1\",\n            \"label\" : \"Alerts\"\n          }\n        ]\n      }\n    ]\n\nThen tapping on the 'Alerts' navigation button will change the URL to\n\"example.com/#/dashboards/alerts\". Bookmarking that URL and loading\nit again later will automatically select the 'Alerts' navigation item\non page load.\n\n### Complex routing: navigation and assets\n\nMany complex applications require the user the navigate to a view (like the\n'Alerts' dashboard view in the example above) and provide some additional\ninformation about the kind of asset or context they would like to view.\nThe [px-context-browser](https://www.predix-ui.com/#/components/px-context-browser/)\nand [px-breadcrumbs](https://www.predix-ui.com/#/components/px-breadcrumbs/)\nelements both help the user select the specific asset they would like to view.\n\nThe px-app-route element supports binding to the navigation to allow users to\nnavigate to purpose-driven views, and binding to multiple asset browsing elements\nto update whats visible within the view.\n\nThe following example shows all of these elements working together:\n\n    <app-location route=\"{{route}}\" use-hash-as-path></app-location>\n    <px-app-route\n        route=\"{{route}}\"\n        use-hash-as-path\n        update-nav-route\n        nav-route=\"{{navRoute}}\">\n    </px-app-route>\n    <px-app-nav\n        items=\"{{navItems}}\"\n        selected-route=\"{{navRoute}}\">\n    </px-app-nav>\n    <px-context-browser\n        items=\"{{assetItems}}\"\n        selected-route=\"{{assetRoute}}\">\n    </px-context-browser>\n    <px-breadcrumbs\n        items=\"{{assetItems}}\"\n        selected-route=\"{{assetRoute}}\">\n    </px-breadcrumbs>\n\nIf the following `navItems` are defined:\n\n    [\n      {\n        \"id\" : \"home\",\n        \"label\" : \"Home\"\n      },\n      {\n        \"id\" : \"dashboards\",\n        \"label\" : \"Dashboards\",\n        \"children\" : [\n          {\n            \"id\" : \"a1\",\n            \"label\" : \"Alerts\"\n          }\n        ]\n      }\n    ]\n\nAnd the following `assetItems` are defined:\n\n    [\n      {\n        \"id\" : \"us\",\n        \"label\" : \"United States\",\n        \"children\" : [\n          {\n            \"id\" : \"calif\",\n            \"label\" : \"California\",\n            \"children\" : [\n              {\n                \"id\" : \"bay-area\",\n                \"label\" : \"San Francisco Bay Area\"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n\nIf the user selects the \"Alerts\" view and uses the context browser to choose\n\"San Francisco Bay Area\" as a filter for the visible alerts, the URL will\nbe changed to the following: \"example.com/#/dashboards/alerts~/us/calif/bay-area\"\n\n### Changing the way URLs are built\n\nThe URL path produced by px-app-route can be bound to two models: the navigation\nmodel (through `navRoute`) and the asset model (through `assetRoute`). Depending\non the needs of the web app, one or both models can be bound to.\n\nThe selected item in each model can be represented as:\n\n  - a **route**, an array of unique ID strings that start at the root of the model\n  graph and terminate at the selected item (e.g. `[\"us\", \"calif\", \"bay-area\"]`).\n  - a **path**, a stringified representation of the route that can be used to\n  set the URL path (e.g. \"us/calif/bay-area\")\n\nBy default, the route segments are joined together with the '/' character, but\nthat can be changed:\n\n    <app-location route=\"{{route}}\" use-hash-as-path></app-location>\n    <px-app-route\n        route=\"{{route}}\"\n        use-hash-as-path\n        update-nav-route\n        nav-route=\"{{navRoute}}\"\n        segment-paths-with=\".\">\n    </px-app-route>\n\nIn the above example, the navigation model route `[\"us\", \"calif\", \"bay-area\"]`\nwould be transformed into the path string \"us.calif.bay-area\".\n\nChoose a safe, unreserved URI character to ensure there are no issues setting\nURL path or loading it later. See [RFC 3986](http://www.ietf.org/rfc/rfc3986.txt)\nfor a list of unsafe and reserved characters. In general, use one of: `-`, `.`,\n`_`, or `~`. The chosen character should not appear in any of the unique ID\nstrings in the model route.\n\nWhen two models are used, the models must be joined together with a character\nto divide the two paths. By default, the models are joined with the '~'\ncharacter. Set the `segment-models-with` attribute on the px-app-route element\nto a safe, unreserved URI character to change this.\n\n### Routing with hash\n\nWhen the backend application server is not setup to manage routes and send frontend\nroutes to a single-page web app index file the hash portion of the URL can be\nused to do routing. To enable hash-based URLs, enable the `use-hash-as-path`\nattribute on both the px-app-route element and the app-location element that\nproduces the route.\n\n### Integrating px-app-route with other routers\n\nThe `encodeAllPaths`, `encodePath`, and `decodePath` methods available on all\npx-app-route instances can also be called directly without stamping a\npx-app-route element in your app.\n\nThose methods are available at `window.PxApp.RouteHelpers.[METHOD_NAME]`.\nCalling these methods directly on the window is a useful way to encode and\ndecode model routes on your page and send the result to a third-party router\n(e.g. any Angular or React router).\n\nSee the API documentation for this component for more information on how\nto use the static methods to encode and decode model routes/paths.","summary":"","path":"../px-app-helpers/px-app-route/px-app-route.html","properties":[{"name":"segmentPathsWith","type":"string","description":"Valid URI-safe character used to seperate URL path segments. Defaults\nto '/' (e.g. the path ['about','company-info'] would be joined as\n'about/company-info').\n\nChoose a safe, unreserved URI character to ensure there are no issues.\nSee [RFC 3986](http://www.ietf.org/rfc/rfc3986.txt) for a list of\nunsafe and reserved characters. In general, use one of: `-`, `.`,\n`_`, or `~`. Note that character should not occur in any paths.","privacy":"public","sourceRange":{"start":{"line":229,"column":8},"end":{"line":232,"column":9}},"metadata":{"polymer":{}},"defaultValue":"\"/\""},{"name":"segmentModelsWith","type":"string","description":"Valid URI-safe character used to seperate different models in the\nURL. Defaults to '~' (e.g. the nav path ['about','company-info'] and\nasset path ['dashboards','trucks'] would be joined as\n'about/company-info~dashboards/trucks'.\n\nChoose a safe, unreserved URI character to ensure there are no issues.\nSee [RFC 3986](http://www.ietf.org/rfc/rfc3986.txt) for a list of\nunsafe and reserved characters. In general, use one of: `-`, `.`,\n`_`, or `~`. Note that character should not occur in any paths.","privacy":"public","sourceRange":{"start":{"line":245,"column":8},"end":{"line":248,"column":9}},"metadata":{"polymer":{}},"defaultValue":"\"~\""},{"name":"route","type":"Object","description":"Bind this property to the `route` exposes by the <app-location> element.\nUpdates to the URL path will be propagated to `route.path` and decoded\nby this component to update the app-nav and app-asset models. Updates\nto the models will be pushed to the URL path.","privacy":"public","sourceRange":{"start":{"line":256,"column":8},"end":{"line":260,"column":9}},"metadata":{"polymer":{"notify":true,"observer":"\"_handleRouteChanged\""}}},{"name":"useHashAsPath","type":"boolean","description":"Set to `true` if the URL path will be prefixed with a `#` character.\nThis should also be enabled on the <app-location> element that shares\nits route with this component.","privacy":"public","sourceRange":{"start":{"line":267,"column":8},"end":{"line":270,"column":9}},"metadata":{"polymer":{}},"defaultValue":"false"},{"name":"updateNavRoute","type":"boolean","description":"Set to `true` to sync a <px-app-nav> component's state with the URL\nbar. See the `navRoute` property for help on binding changes.","privacy":"public","sourceRange":{"start":{"line":276,"column":8},"end":{"line":279,"column":9}},"metadata":{"polymer":{}},"defaultValue":"false"},{"name":"navRoute","type":"Array","description":"Bind this property to a <px-app-nav> component's `selectedRoute`\nproperty to keep the navigation state in sync with the URL path.\nMust enable `updateNavRoute` for this to work.","privacy":"public","sourceRange":{"start":{"line":286,"column":8},"end":{"line":289,"column":9}},"metadata":{"polymer":{"notify":true}}},{"name":"navPathString","type":"string","description":"Read-only string that is computed from the `navRoute`. Will be\npushed into the URL path.","privacy":"public","sourceRange":{"start":{"line":295,"column":8},"end":{"line":300,"column":9}},"metadata":{"polymer":{"readOnly":true}},"defaultValue":"\"\""},{"name":"updateAssetRoute","type":"boolean","description":"Set to `true` to sync the state of components that use the Asset Graph\nBehavior with the URL path. See the `assetRoute` property for help\non binding changes.","privacy":"public","sourceRange":{"start":{"line":307,"column":8},"end":{"line":310,"column":9}},"metadata":{"polymer":{}},"defaultValue":"false"},{"name":"assetRoute","type":"Array","description":"Bind this property to a the `selectedRoute` property of one or more\ncomponents that use the Asset Graph Behavior to keep the selected\nasset state in sync with the URL path. Must enable `updateAssetRoute` for\nthis to work.","privacy":"public","sourceRange":{"start":{"line":318,"column":8},"end":{"line":321,"column":9}},"metadata":{"polymer":{"notify":true}}},{"name":"assetPathString","type":"string","description":"Read-only string that is computed from the `assetRoute`. Will be\npushed into the URL path.","privacy":"public","sourceRange":{"start":{"line":327,"column":8},"end":{"line":332,"column":9}},"metadata":{"polymer":{"readOnly":true}},"defaultValue":"\"\""},{"name":"path","type":"string","description":"Read-only string that is computed from the `navRoute` and\n`assetRoute` models (if they are enabled). Will be used to set the\nURL path.","privacy":"public","sourceRange":{"start":{"line":339,"column":8},"end":{"line":344,"column":9}},"metadata":{"polymer":{"observer":"\"_handlePathChanged\"","readOnly":true}}},{"name":"_isReady","type":"boolean","description":"","privacy":"protected","sourceRange":{"start":{"line":346,"column":8},"end":{"line":346,"column":25}},"metadata":{"polymer":{}}}],"methods":[{"name":"ready","description":"","privacy":"protected","sourceRange":{"start":{"line":353,"column":6},"end":{"line":355,"column":7}},"metadata":{},"params":[]},{"name":"_computeAppNavPathString","description":"","privacy":"protected","sourceRange":{"start":{"line":357,"column":6},"end":{"line":372,"column":7}},"metadata":{},"params":[{"name":"updateNavRoute"},{"name":"navRoute"},{"name":"segmentPathsWith"}]},{"name":"_computeAppAssetPathString","description":"","privacy":"protected","sourceRange":{"start":{"line":374,"column":6},"end":{"line":389,"column":7}},"metadata":{},"params":[{"name":"updateAssetRoute"},{"name":"assetRoute"},{"name":"segmentPathsWith"}]},{"name":"_computePath","description":"","privacy":"protected","sourceRange":{"start":{"line":391,"column":6},"end":{"line":416,"column":7}},"metadata":{},"params":[{"name":"updateNavRoute"},{"name":"navPath"},{"name":"updateAssetRoute"},{"name":"assetPath"},{"name":"pathSegment"},{"name":"modelSegment"},{"name":"useHash"}]},{"name":"_handlePathChanged","description":"","privacy":"protected","sourceRange":{"start":{"line":418,"column":6},"end":{"line":422,"column":7}},"metadata":{},"params":[{"name":"newPath"},{"name":"oldPath"}]},{"name":"_handleRouteChanged","description":"","privacy":"protected","sourceRange":{"start":{"line":424,"column":6},"end":{"line":431,"column":7}},"metadata":{},"params":[{"name":"newRoute"},{"name":"oldRoute"}]},{"name":"_windowPathChanged","description":"","privacy":"protected","sourceRange":{"start":{"line":433,"column":6},"end":{"line":451,"column":7}},"metadata":{},"params":[{"name":"newPath"}]},{"name":"encodeAllPaths","description":"Encodes multiple route models into a path string that can be passed to\na JavaScript router (or to `window.location`). Pass an object with\n`navRoute` and `assetRoute` route arrays and an optional configuration\nobject.\n\nTo generate a path for nav and asset items, call with the following\narguments:\n\n```\n  encodeAllPaths(\n    {\n      navRoute: ['dashboards', 'truck-locations'],\n      assetRoute: ['us', 'calif', 'bay-area']\n    },\n    {\n      segmentPathsWith: '/',\n      segmentModelsWith: '~',\n      prefixFirstPath: true\n    }\n  );\n```\n\nThe following string will be returned:\n\n```\n  '/dashboards/truck-locations~/us/calif/bay-area'\n```\n\n## Passing routes\n\nThe `routes` argument should be an object with one or both of the\nfollowing keys:\n\n  - `navRoute`: An array of strings\n  - `assetRoute`: An array of strings\n\n## Configuring the encoder\n\nThe following `options` can be passed to change the output:\n\n  - `segmentPathsWith`: Any URI-safe character (one of `-`, `.`, `_`, or `~`)\n  - `segmentModelsWith`: Any URI-safe character (one of `-`, `.`, `_`, or `~`)\n  - `prefixFirstPath`: Adds the path segment character to the front of the returned path","privacy":"public","sourceRange":{"start":{"line":502,"column":6},"end":{"line":504,"column":7}},"metadata":{},"params":[{"name":"routes","type":"Object"},{"name":"options","type":"Object"}],"return":{"type":"String"}},{"name":"encodePath","description":"Encodes a route (an array of string) into a path string that can be passed\nto a JavaScript router (or to `window.location`). Pass an array of\nstrings and a URI-safe character to segment the strings with (e.g. '/').\nOptionally set the `prefixFirstPath` argument to true to add the segment\ncharacter to the front of the path.\n\nFor example, given the following settings:\n\n```\n  encodePath(['dashboards', 'truck-locations'], '/', true);\n```\n\nThe following string will be returned:\n\n```\n  '/dashboards/truck-locations'\n```","privacy":"public","sourceRange":{"start":{"line":531,"column":6},"end":{"line":533,"column":7}},"metadata":{},"params":[{"name":"route","type":"Array","description":"an array of string"},{"name":"segmentWith","type":"Object","description":"a URI-safe character that will be placed between each path segment"},{"name":"prefixFirstPath","type":"Boolean","description":"adds the segment character to the front of the returned path"}],"return":{"type":"String"}},{"name":"decodePath","description":"Decodes a URI path into arrays of route strings that can be passed to\nother components to synchronise state.\n\n## Decode navigation path only\n\nTo decode a path string that only contains nav items, call the method\nwith the path to decode and the following options:\n\n```\n  decodePath('/dashboards/truck-locations', {\n    navRoute: true\n  });\n```\n\nThe following object will be returned:\n\n```\n  {\n    navRoute: ['dashboards', 'truck-locations']\n  }\n```\n\n## Decode navigation and asset paths\n\nTo decode a path string that contains nav items and asset items,\ncall the method with the path to decode and the following options:\n\n```\n  decodePath('/dashboards/truck-locations~/us/calif/bay-area', {\n    navRoute: true,\n    assetRoute: true\n  });\n```\n\nThe following object will be returned:\n\n```\n  {\n    navRoute: ['dashboards', 'truck-locations'],\n    assetRoute: ['us', 'calif', 'bay-area']\n  }\n```\n\n## Configuring segment seperators\n\nThe characters used to seperate segments of each path, and the character\nused to join multiple model paths, can be set through the options\nobject to any URI-safe character (one of `-`, `.`, `_`, or `~`).\n\nTo decode this custom path, use the following options:\n\n```\n  decodePath('alerts.inbox_factories.factory1.area38', {\n    navRoute: true,\n    assetRoute: true,\n    segmentPathsWith: '.',\n    segmentModelsWith: '_'\n  });\n```\n\nThe following object will be returned:\n\n```\n  {\n    navRoute: ['alerts', 'inbox'],\n    assetRoute: ['factories', 'factory1', 'area38']\n  }\n```\n\n## All configurations\n\nThe following `options` can be passed to change the output:\n\n  - `navRoute`: A boolean, if `true` the nav route will be decoded\n  - `assetRoute`: A boolean, if `true` the asset route will be decoded\n  - `segmentPathsWith`: Any URI-safe character (one of `-`, `.`, `_`, or `~`)\n  - `segmentModelsWith`: Any URI-safe character (one of `-`, `.`, `_`, or `~`)\n  - `stripPrefix`: Strips the `segmentPathsWith` character from the front of the path, if it is found there","privacy":"public","sourceRange":{"start":{"line":619,"column":6},"end":{"line":621,"column":7}},"metadata":{},"params":[{"name":"path","type":"String"},{"name":"options","type":"Object"}],"return":{"type":"Object"}},{"name":"isDeepEqual","description":"Determines if two arrays of strings are deeply equal - returns `true`\nif both arrays have the same strings in the same order. Helps perform\nchecks on the equality of arrays of route strings.","privacy":"public","sourceRange":{"start":{"line":632,"column":6},"end":{"line":634,"column":7}},"metadata":{},"params":[{"name":"a1","type":"Array"},{"name":"a2","type":"Array"}],"return":{"type":"Boolean"}}],"staticMethods":[],"demos":[],"metadata":{},"sourceRange":{"start":{"line":215,"column":12},"end":{"line":635,"column":5}},"privacy":"public","superclass":"HTMLElement","attributes":[{"name":"segment-paths-with","description":"Valid URI-safe character used to seperate URL path segments. Defaults\nto '/' (e.g. the path ['about','company-info'] would be joined as\n'about/company-info').\n\nChoose a safe, unreserved URI character to ensure there are no issues.\nSee [RFC 3986](http://www.ietf.org/rfc/rfc3986.txt) for a list of\nunsafe and reserved characters. In general, use one of: `-`, `.`,\n`_`, or `~`. Note that character should not occur in any paths.","sourceRange":{"start":{"line":229,"column":8},"end":{"line":232,"column":9}},"metadata":{},"type":"string"},{"name":"segment-models-with","description":"Valid URI-safe character used to seperate different models in the\nURL. Defaults to '~' (e.g. the nav path ['about','company-info'] and\nasset path ['dashboards','trucks'] would be joined as\n'about/company-info~dashboards/trucks'.\n\nChoose a safe, unreserved URI character to ensure there are no issues.\nSee [RFC 3986](http://www.ietf.org/rfc/rfc3986.txt) for a list of\nunsafe and reserved characters. In general, use one of: `-`, `.`,\n`_`, or `~`. Note that character should not occur in any paths.","sourceRange":{"start":{"line":245,"column":8},"end":{"line":248,"column":9}},"metadata":{},"type":"string"},{"name":"route","description":"Bind this property to the `route` exposes by the <app-location> element.\nUpdates to the URL path will be propagated to `route.path` and decoded\nby this component to update the app-nav and app-asset models. Updates\nto the models will be pushed to the URL path.","sourceRange":{"start":{"line":256,"column":8},"end":{"line":260,"column":9}},"metadata":{},"type":"Object"},{"name":"use-hash-as-path","description":"Set to `true` if the URL path will be prefixed with a `#` character.\nThis should also be enabled on the <app-location> element that shares\nits route with this component.","sourceRange":{"start":{"line":267,"column":8},"end":{"line":270,"column":9}},"metadata":{},"type":"boolean"},{"name":"update-nav-route","description":"Set to `true` to sync a <px-app-nav> component's state with the URL\nbar. See the `navRoute` property for help on binding changes.","sourceRange":{"start":{"line":276,"column":8},"end":{"line":279,"column":9}},"metadata":{},"type":"boolean"},{"name":"nav-route","description":"Bind this property to a <px-app-nav> component's `selectedRoute`\nproperty to keep the navigation state in sync with the URL path.\nMust enable `updateNavRoute` for this to work.","sourceRange":{"start":{"line":286,"column":8},"end":{"line":289,"column":9}},"metadata":{},"type":"Array"},{"name":"nav-path-string","description":"Read-only string that is computed from the `navRoute`. Will be\npushed into the URL path.","sourceRange":{"start":{"line":295,"column":8},"end":{"line":300,"column":9}},"metadata":{},"type":"string"},{"name":"update-asset-route","description":"Set to `true` to sync the state of components that use the Asset Graph\nBehavior with the URL path. See the `assetRoute` property for help\non binding changes.","sourceRange":{"start":{"line":307,"column":8},"end":{"line":310,"column":9}},"metadata":{},"type":"boolean"},{"name":"asset-route","description":"Bind this property to a the `selectedRoute` property of one or more\ncomponents that use the Asset Graph Behavior to keep the selected\nasset state in sync with the URL path. Must enable `updateAssetRoute` for\nthis to work.","sourceRange":{"start":{"line":318,"column":8},"end":{"line":321,"column":9}},"metadata":{},"type":"Array"},{"name":"asset-path-string","description":"Read-only string that is computed from the `assetRoute`. Will be\npushed into the URL path.","sourceRange":{"start":{"line":327,"column":8},"end":{"line":332,"column":9}},"metadata":{},"type":"string"},{"name":"path","description":"Read-only string that is computed from the `navRoute` and\n`assetRoute` models (if they are enabled). Will be used to set the\nURL path.","sourceRange":{"start":{"line":339,"column":8},"end":{"line":344,"column":9}},"metadata":{},"type":"string"}],"events":[{"type":"CustomEvent","name":"route-changed","description":"Fired when the `route` property changes.","metadata":{}},{"type":"CustomEvent","name":"nav-route-changed","description":"Fired when the `navRoute` property changes.","metadata":{}},{"type":"CustomEvent","name":"asset-route-changed","description":"Fired when the `assetRoute` property changes.","metadata":{}}],"styling":{"cssVariables":[],"selectors":[]},"slots":[],"tagname":"px-app-route"}]}